{
    /* You node path */
    "node_path": "/usr/local/bin",

    /* Your npm executables path */
    "coffeelint_path": "/usr/local/share/npm/bin",

    /* Your coffeelint config */
    "lint_config": {
        /*
            This rule forbids tabs in indentation. Enough said. It is enabled by default.
        */
        "no_tabs": {
            "level": "error"
        },

        /*
            This rule forbids trailing whitespace in your code, since it is needless cruft. It is enabled by default.
        */
        "no_trailing_whitespace": {
            "level": "error",
            "allowed_in_comments": false
        },

        /*
            This rule imposes a maximum line length on your code.
            Python's style guide does a good job explaining why you might want to limit the length of your lines,
            though this is a matter of taste. Lines can be no longer than eighty characters by default.
        */

        "max_line_length": {
            "value": 80,
            "level": "error"
        },

        /*
            This rule mandates that all class names are camel cased.
            Camel casing class names is a generally accepted way of distinguishing
            constructor functions - which require the 'new' prefix to behave properly - from plain old functions.
        */

        "camel_case_classes": {
            "level": "error"
        },

        /*
            This rule imposes a standard number of spaces to be used for indentation.
            Since whitespace is significant in CoffeeScript, it's critical that a project
            chooses a standard indentation format and stays consistent.
            Other roads lead to darkness.
        */

        "indentation": {
            "value": 2,
            "level": "error"
        },

        /*
            This rule prohibits implicit braces when declaring object literals.
            Implicit braces can make code more difficult to understand, especially
            when used in combination with optional parenthesis.
        */

        "no_implicit_braces": {
            "level": "ignore"
        },

        /*
            This rule prohibits trailing semicolons, since they are needless cruft in CoffeeScript.
            Trailing semicolons are forbidden by default.

        */

        "no_trailing_semicolons": {
            "level": "error"
        },

        /*
            This rule forbids the increment and decrement arithmetic operators.
            Some people believe the ++ and -- to be cryptic and the cause of bugs due to misunderstandings of their precedence rules.
            This rule is disabled by default.

            default level: ignore
        */
        "no_plusplus": {
            "level": "ignore"
        },

        /*
            This rule forbids throwing string literals or interpolations.
            While JavaScript (and CoffeeScript by extension) allow any expression to be thrown,
            it is best to only throw Error objects, because they contain valuable debugging information like the stack trace.
            Because of JavaScript's dynamic nature, CoffeeLint cannot ensure you are always throwing instances of Error.
            It will only catch the simple but real case of throwing literal strings.

            This rule is enabled by default.

        */
        "no_throwing_strings": {
            "level": "error"
        },
        "cyclomatic_complexity": {
            "value": 10,
            "level": "ignore"
        },

        /*
            Backticks allow snippets of JavaScript to be embedded in CoffeeScript.
            While some folks consider backticks useful in a few niche circumstances,
            they should be avoided because so none of JavaScript's "bad parts", like with and eval,
            sneak into CoffeeScript. This rule is enabled by default.
        */
        "no_backticks": {
            "level": "error"
        },

        /*
            This rule ensures your project uses only windows or unix line endings.
            This rule is disabled by default.

        */
        "line_endings": {
            "level": "ignore",
            "value": "unix"
        },

        /*
            This rule prohibits implicit parens on function calls.
            Implicit parens are permitted by default, since their use is idiomatic CoffeeScript.
        */
        "no_implicit_parens": {
            "level": "ignore"
        },


        "empty_constructor_needs_parens": {
            "level": "ignore"
        },


        "non_empty_constructor_needs_parens": {
            "level": "ignore"
        },


        "no_empty_param_list": {
            "level": "ignore"
        },


        "space_operators": {
            "level": "ignore"
        },


        "duplicate_key": {
            "level": "error"
        },

        "newlines_after_classes": {
            "value": 3,
            "level": "ignore"
        },

        /*
            This rule checks that no stand alone @ are in use, they are discouraged.
            Further information in CoffeScript issue #1601
        */

        "no_stand_alone_at": {
            "level": "ignore"
        },

        /*
            This rule checks to see that there is spacing before and after the arrow operator that declares a function.
            This rule is disabled by default.
            Note that if arrow_spacing is enabled, and you pass an empty function as a parameter,
            arrow_spacing will accept either a space or no space in-between the arrow operator and the parenthesis

        */

        "arrow_spacing": {
            "level": "ignore"
        },


        "coffeescript_error": {
            "level": "error"
        }
    }
}
